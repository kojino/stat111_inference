# now let's drop some of the data we don't need!
drops <- c("opeid6", "INSTNM","STABBR", "CITY", "INSTURL", "NPCURL", "SATVR25", "SATVR75", "SATMT25", "SATMT75", "SATWR25", "SATWR75", "ACTEN25", "ACTCM25", "ACTCM75", "ACTEN75","ACTMT25", "ACTMT75", "ACTWR25", "ACTWR75", "ACTCMMID", "ACTENMID", "ACTMTMID", "ACTWRMID")
# delete all of the columns that we don't need
data[drops] <- list(NULL)
convert_to_string <- c("INSTNM","STABBR")
data[,convert_to_string] <- lapply(data[,convert_to_string], as.character)
# We change control to become a factor (was a float.)
data$CONTROL = as.factor(data$CONTROL)
data$CONTROL = as.factor(data$CONTROL)
# convert some of our variables from factor to numeric
convert_to_numeric<- c("gt_25k_p6","RELAFFIL","CURROPER","NPT4_PUB","NPT4_PRIV","NPT41_PUB","NPT42_PUB","NPT43_PUB","NPT44_PUB","NPT45_PUB","NPT41_PRIV","NPT42_PRIV","NPT43_PRIV","NPT44_PRIV","NPT45_PRIV","GRAD_DEBT_MDN_SUPP","GRAD_DEBT_MDN10YR_SUPP","RPY_3YR_RT_SUPP","C150_4_POOLED_SUPP","md_earn_wne_p10", "UNITID", "OPEID","PREDDEG", "C200_L4_POOLED_SUPP","PCTFLOAN","UG25abv","RET_FT4","RET_FTL4","RET_PT4","RET_PTL4","PCTPELL","PPTUG_EF","SATVRMID","SATMTMID","SATWRMID","SAT_AVG","SAT_AVG_ALL","PCIP01","PCIP03","PCIP04","PCIP05","PCIP09","PCIP10","PCIP11","PCIP12","PCIP13","PCIP14","PCIP15","PCIP16","PCIP19","PCIP22","PCIP23","PCIP24","PCIP25","PCIP26","PCIP27","PCIP29","PCIP30","PCIP31","PCIP38","PCIP39","PCIP40","PCIP41","PCIP42","PCIP43","PCIP44","PCIP45","PCIP46","PCIP47","PCIP48","PCIP49","PCIP50","PCIP51","PCIP52","PCIP54","UGDS","UGDS_WHITE","UGDS_BLACK","UGDS_HISP","UGDS_ASIAN","UGDS_AIAN","UGDS_NHPI","UGDS_2MOR","UGDS_NRA","UGDS_UNKN")
# Convert from factor to numeric!
data[,convert_to_numeric] <- lapply(data[,convert_to_numeric], as.character)
data[,convert_to_numeric] <- lapply(data[,convert_to_numeric], as.numeric)
library('Matrix')
library('foreach')
library('glmnet')
library('lars')
install.packages(c('glmnet', 'lars'))
install.packages(c("glmnet", "lars"))
n = which(names(data) == "md_earn_wne_p10")
which(names(data) == "CONTROL")
n_total = dim(data)[2]
# Because we have a lot of missing variables, we need to impute our data
# This essentially puts in the mean of each variable in place of each data
## IMPUTE DATA
for(i in 1:n_total){
data[is.na(data[,i]),i] = mean(data[,i], na.rm=TRUE)
}
# identify which variables are numeric. We use this because lasso can only use
# numeric variables
numeric_variables<- c("gt_25k_p6","RELAFFIL","CURROPER","NPT4_PUB","NPT4_PRIV","NPT41_PUB","NPT42_PUB","NPT43_PUB","NPT44_PUB","NPT45_PUB","NPT41_PRIV","NPT42_PRIV","NPT43_PRIV","NPT44_PRIV","NPT45_PRIV","GRAD_DEBT_MDN_SUPP","GRAD_DEBT_MDN10YR_SUPP","RPY_3YR_RT_SUPP","C150_4_POOLED_SUPP","PREDDEG", "C200_L4_POOLED_SUPP","PCTFLOAN","UG25abv","RET_FT4","RET_FTL4","RET_PT4","RET_PTL4","PCTPELL","PPTUG_EF","SATVRMID","SATMTMID","SATWRMID","SAT_AVG","SAT_AVG_ALL","PCIP01","PCIP03","PCIP04","PCIP05","PCIP09","PCIP10","PCIP11","PCIP12","PCIP13","PCIP14","PCIP15","PCIP16","PCIP19","PCIP22","PCIP23","PCIP24","PCIP25","PCIP26","PCIP27","PCIP29","PCIP30","PCIP31","PCIP38","PCIP39","PCIP40","PCIP41","PCIP42","PCIP43","PCIP44","PCIP45","PCIP46","PCIP47","PCIP48","PCIP49","PCIP50","PCIP51","PCIP52","PCIP54","UGDS","UGDS_WHITE","UGDS_BLACK","UGDS_HISP","UGDS_ASIAN","UGDS_AIAN","UGDS_NHPI","UGDS_2MOR","UGDS_NRA","UGDS_UNKN")
# We are attempting to use LASSO in order to pick out the variables that we want to look at
# we choose LASSO because it is a variable selection method.
# we are then going to use every variable that this method uses within our linear model
# look for the significant variables of all of the numeric.
# LASSO
# Way to get rid of variables that we don't need them.
# This is a way of pairing down the data if you don't know how to do it.
# It penalizes for variables (and pick the penalty term for us.)
# Probably should pick 10-15 variables that do relate to
# Use a logical argument to get rid of some of the variables
significant_variables = glmnet(x=scale(as.matrix(data[numeric_variables])), y=log(data$md_earn_wne_p10),  standardize = T, intercept = F, family = c("gaussian"), alpha = 1)
# we set the lambda value to be .01 because we want there to be a medium penalty
# we choose which variables are significant via the lasso
coef(significant_variables, s=.01)
## So, we end up with a model that has these variables as significant
significant_variables = glmnet(x=scale(as.matrix(data[numeric_variables])), y=log(data$md_earn_wne_p10),  standardize = T, intercept = F, family = c("gaussian"), alpha = 1)
install.packages(c('glmnet', 'lars'))
library('Matrix')
library('foreach')
library('glmnet')
library('lars')
n = which(names(data) == "md_earn_wne_p10")
which(names(data) == "CONTROL")
n_total = dim(data)[2]
# Because we have a lot of missing variables, we need to impute our data
# This essentially puts in the mean of each variable in place of each data
## IMPUTE DATA
for(i in 1:n_total){
data[is.na(data[,i]),i] = mean(data[,i], na.rm=TRUE)
}
# identify which variables are numeric. We use this because lasso can only use
# numeric variables
numeric_variables<- c("gt_25k_p6","RELAFFIL","CURROPER","NPT4_PUB","NPT4_PRIV","NPT41_PUB","NPT42_PUB","NPT43_PUB","NPT44_PUB","NPT45_PUB","NPT41_PRIV","NPT42_PRIV","NPT43_PRIV","NPT44_PRIV","NPT45_PRIV","GRAD_DEBT_MDN_SUPP","GRAD_DEBT_MDN10YR_SUPP","RPY_3YR_RT_SUPP","C150_4_POOLED_SUPP","PREDDEG", "C200_L4_POOLED_SUPP","PCTFLOAN","UG25abv","RET_FT4","RET_FTL4","RET_PT4","RET_PTL4","PCTPELL","PPTUG_EF","SATVRMID","SATMTMID","SATWRMID","SAT_AVG","SAT_AVG_ALL","PCIP01","PCIP03","PCIP04","PCIP05","PCIP09","PCIP10","PCIP11","PCIP12","PCIP13","PCIP14","PCIP15","PCIP16","PCIP19","PCIP22","PCIP23","PCIP24","PCIP25","PCIP26","PCIP27","PCIP29","PCIP30","PCIP31","PCIP38","PCIP39","PCIP40","PCIP41","PCIP42","PCIP43","PCIP44","PCIP45","PCIP46","PCIP47","PCIP48","PCIP49","PCIP50","PCIP51","PCIP52","PCIP54","UGDS","UGDS_WHITE","UGDS_BLACK","UGDS_HISP","UGDS_ASIAN","UGDS_AIAN","UGDS_NHPI","UGDS_2MOR","UGDS_NRA","UGDS_UNKN")
# We are attempting to use LASSO in order to pick out the variables that we want to look at
# we choose LASSO because it is a variable selection method.
# we are then going to use every variable that this method uses within our linear model
# look for the significant variables of all of the numeric.
# LASSO
# Way to get rid of variables that we don't need them.
# This is a way of pairing down the data if you don't know how to do it.
# It penalizes for variables (and pick the penalty term for us.)
# Probably should pick 10-15 variables that do relate to
# Use a logical argument to get rid of some of the variables
significant_variables = glmnet(x=scale(as.matrix(data[numeric_variables])), y=log(data$md_earn_wne_p10),  standardize = T, intercept = F, family = c("gaussian"), alpha = 1)
# we set the lambda value to be .01 because we want there to be a medium penalty
# we choose which variables are significant via the lasso
coef(significant_variables, s=.01)
pairs(~log(md_earn_wne_p10) + UGDS_NRA + UGDS_ASIAN+ PCIP45+ PCIP27+ PCIP26+ PCIP14+ SATMTMID,data)
pairs(~log(md_earn_wne_p10) + UGDS_NRA + UGDS_ASIAN+ PCIP45+ PCIP27+ PCIP26+ PCIP14+ SATMTMID,data)
fname=file.choose()
data=read.csv(fname,header=T)
# Look at the dimensions of our data
dim(data)
# now let's drop some of the data we don't need!
drops <- c("gt_25k_p6","opeid6", "INSTNM","STABBR", "CITY", "INSTURL", "NPCURL", "SATVR25", "SATVR75", "SATMT25", "SATMT75", "SATWR25", "SATWR75", "ACTEN25", "ACTCM25", "ACTCM75", "ACTEN75","ACTMT25", "ACTMT75", "ACTWR25", "ACTWR75", "ACTCMMID", "ACTENMID", "ACTMTMID", "ACTWRMID")
# delete all of the columns that we don't need
data[drops] <- list(NULL)
convert_to_string <- c("INSTNM","STABBR")
data[,convert_to_string] <- lapply(data[,convert_to_string], as.character)
# We change control to become a factor (was a float.)
data$CONTROL = as.factor(data$CONTROL)
data$CONTROL = as.factor(data$CONTROL)
# convert some of our variables from factor to numeric
convert_to_numeric<- c("RELAFFIL","CURROPER","NPT4_PUB","NPT4_PRIV","NPT41_PUB","NPT42_PUB","NPT43_PUB","NPT44_PUB","NPT45_PUB","NPT41_PRIV","NPT42_PRIV","NPT43_PRIV","NPT44_PRIV","NPT45_PRIV","GRAD_DEBT_MDN_SUPP","GRAD_DEBT_MDN10YR_SUPP","RPY_3YR_RT_SUPP","C150_4_POOLED_SUPP","md_earn_wne_p10", "UNITID", "OPEID","PREDDEG", "C200_L4_POOLED_SUPP","PCTFLOAN","UG25abv","RET_FT4","RET_FTL4","RET_PT4","RET_PTL4","PCTPELL","PPTUG_EF","SATVRMID","SATMTMID","SATWRMID","SAT_AVG","SAT_AVG_ALL","PCIP01","PCIP03","PCIP04","PCIP05","PCIP09","PCIP10","PCIP11","PCIP12","PCIP13","PCIP14","PCIP15","PCIP16","PCIP19","PCIP22","PCIP23","PCIP24","PCIP25","PCIP26","PCIP27","PCIP29","PCIP30","PCIP31","PCIP38","PCIP39","PCIP40","PCIP41","PCIP42","PCIP43","PCIP44","PCIP45","PCIP46","PCIP47","PCIP48","PCIP49","PCIP50","PCIP51","PCIP52","PCIP54","UGDS","UGDS_WHITE","UGDS_BLACK","UGDS_HISP","UGDS_ASIAN","UGDS_AIAN","UGDS_NHPI","UGDS_2MOR","UGDS_NRA","UGDS_UNKN")
# Convert from factor to numeric!
data[,convert_to_numeric] <- lapply(data[,convert_to_numeric], as.character)
data[,convert_to_numeric] <- lapply(data[,convert_to_numeric], as.numeric)
plot(PCIP_14,log(md_earn_wne_p10))
plot(PCIP_14,log(md_earn_wne_p10),data=data)
plot(data$PCIP_14,data$log(md_earn_wne_p10))
plot(data$PCIP_14,log(data$md_earn_wne_p10)
plot(data$PCIP_14,log(data$md_earn_wne_p10)
plot(data$PCIP_14,log(data$md_earn_wne_p10))
plot(data$PCIP_14,log(data$md_earn_wne_p10))
length(data$PCIP_14)
plot(data$PCIP14,log(data$md_earn_wne_p10))
plot(log(data$PCIP14),log(data$md_earn_wne_p10))
plot(sqrt(data$PCIP14),log(data$md_earn_wne_p10))
plot(1/data$PCIP14,log(data$md_earn_wne_p10))
plot(log(data$PCIP14),log(data$md_earn_wne_p10))
plot(sqrt(data$PCIP14),log(data$md_earn_wne_p10))
plot(1/data$PCIP14,log(data$md_earn_wne_p10))
plot(data$UGDS_ASIAN,log(data$md_earn_wne_p10))
plot(data$UGDS_ASIAN,log(data$md_earn_wne_p10))
plot(data$PCIP14,log(data$md_earn_wne_p10))
plot(log(data$PCIP14),log(data$md_earn_wne_p10))
library('data.table')
library('ggplot2')
library('scales')
library('grid')
install.packages(c('glmnet', 'lars'))
library('Matrix')
library('foreach')
library('glmnet')
library('lars')
install.packages('cvTools')
library('cvTools')
fname=file.choose()
data=read.csv(fname,header=T)
dim(data)
drops <- c("gt_25k_p6","opeid6", "INSTNM","STABBR", "CITY", "INSTURL", "NPCURL", "SATVR25", "SATVR75", "SATMT25", "SATMT75", "SATWR25", "SATWR75", "ACTEN25", "ACTCM25", "ACTCM75", "ACTEN75","ACTMT25", "ACTMT75", "ACTWR25", "ACTWR75", "ACTCMMID", "ACTENMID", "ACTMTMID", "ACTWRMID")
data[drops] <- list(NULL)
data[,convert_to_string] <- lapply(data[,convert_to_string], as.character)
convert_to_string <- c("INSTNM","STABBR")
data[,convert_to_string] <- lapply(data[,convert_to_string], as.character)
convert_to_string <- c("INSTNM","STABBR")
data[,convert_to_string] <- lapply(data[,convert_to_string], as.character)
drops <- c("gt_25k_p6","opeid6", "INSTNM","STABBR", "CITY", "INSTURL", "NPCURL", "SATVR25", "SATVR75", "SATMT25", "SATMT75", "SATWR25", "SATWR75", "ACTEN25", "ACTCM25", "ACTCM75", "ACTEN75","ACTMT25", "ACTMT75", "ACTWR25", "ACTWR75", "ACTCMMID", "ACTENMID", "ACTMTMID", "ACTWRMID")
# delete all of the columns that we don't need
data[drops] <- list(NULL)
convert_to_string <- c("INSTNM","STABBR")
data[,convert_to_string] <- lapply(data[,convert_to_string], as.character)
data$CONTROL = as.factor(data$CONTROL)
data$CONTROL = as.factor(data$CONTROL)
convert_to_numeric<- c("RELAFFIL","CURROPER","NPT4_PUB","NPT4_PRIV","NPT41_PUB","NPT42_PUB","NPT43_PUB","NPT44_PUB","NPT45_PUB","NPT41_PRIV","NPT42_PRIV","NPT43_PRIV","NPT44_PRIV","NPT45_PRIV","GRAD_DEBT_MDN_SUPP","GRAD_DEBT_MDN10YR_SUPP","RPY_3YR_RT_SUPP","C150_4_POOLED_SUPP","md_earn_wne_p10", "UNITID", "OPEID","PREDDEG", "C200_L4_POOLED_SUPP","PCTFLOAN","UG25abv","RET_FT4","RET_FTL4","RET_PT4","RET_PTL4","PCTPELL","PPTUG_EF","SATVRMID","SATMTMID","SATWRMID","SAT_AVG","SAT_AVG_ALL","PCIP01","PCIP03","PCIP04","PCIP05","PCIP09","PCIP10","PCIP11","PCIP12","PCIP13","PCIP14","PCIP15","PCIP16","PCIP19","PCIP22","PCIP23","PCIP24","PCIP25","PCIP26","PCIP27","PCIP29","PCIP30","PCIP31","PCIP38","PCIP39","PCIP40","PCIP41","PCIP42","PCIP43","PCIP44","PCIP45","PCIP46","PCIP47","PCIP48","PCIP49","PCIP50","PCIP51","PCIP52","PCIP54","UGDS","UGDS_WHITE","UGDS_BLACK","UGDS_HISP","UGDS_ASIAN","UGDS_AIAN","UGDS_NHPI","UGDS_2MOR","UGDS_NRA","UGDS_UNKN")
data[,convert_to_numeric] <- lapply(data[,convert_to_numeric], as.character)
data[,convert_to_numeric] <- lapply(data[,convert_to_numeric], as.numeric)
dim(data)
View(data)
n = which(names(data) == "md_earn_wne_p10")
which(names(data) == "CONTROL")
n_total = dim(data)[2]
for(i in 1:n_total){
data[is.na(data[,i]),i] = mean(data[,i], na.rm=TRUE)
}
numeric_variables<- c("RELAFFIL","CURROPER","NPT4_PUB","NPT4_PRIV","NPT41_PUB","NPT42_PUB","NPT43_PUB","NPT44_PUB","NPT45_PUB","NPT41_PRIV","NPT42_PRIV","NPT43_PRIV","NPT44_PRIV","NPT45_PRIV","GRAD_DEBT_MDN_SUPP","GRAD_DEBT_MDN10YR_SUPP","RPY_3YR_RT_SUPP","C150_4_POOLED_SUPP","PREDDEG", "C200_L4_POOLED_SUPP","PCTFLOAN","UG25abv","RET_FT4","RET_FTL4","RET_PT4","RET_PTL4","PCTPELL","PPTUG_EF","SATVRMID","SATMTMID","SATWRMID","SAT_AVG","SAT_AVG_ALL","PCIP01","PCIP03","PCIP04","PCIP05","PCIP09","PCIP10","PCIP11","PCIP12","PCIP13","PCIP14","PCIP15","PCIP16","PCIP19","PCIP22","PCIP23","PCIP24","PCIP25","PCIP26","PCIP27","PCIP29","PCIP30","PCIP31","PCIP38","PCIP39","PCIP40","PCIP41","PCIP42","PCIP43","PCIP44","PCIP45","PCIP46","PCIP47","PCIP48","PCIP49","PCIP50","PCIP51","PCIP52","PCIP54","UGDS","UGDS_WHITE","UGDS_BLACK","UGDS_HISP","UGDS_ASIAN","UGDS_AIAN","UGDS_NHPI","UGDS_2MOR","UGDS_NRA","UGDS_UNKN")
significant_variables = glmnet(x=scale(as.matrix(data[numeric_variables])), y=log(data$md_earn_wne_p10),  standardize = T, intercept = F, family = c("gaussian"), alpha = 1)
coef(significant_variables, s=.025)
library(FactoMineR)
mydata = read.csv("artist_df.csv")
mydata = read.csv("artist_df.csv")
load("~/psets/cs181/cs181-practical3/artist_df.csv")
mydata <- read.csv("artist_df.csv")
mydata <- read.csv("artist_df.csv")
mydata <- read.csv("/Users/kojin/psets/cs181/cs181-practical3/artist_df.csv")
library(FactoMineR)
mydata <- read.csv("/Users/kojin/psets/cs181/cs181-practical3/artist_df.csv")
library(FactoMineR)
library("/Users/kojin/psets/cs181/cs181-practical3/FactoMineR")
library(FactoMineR)
install.packages("FactoMineR")
library(FactoMineR)
R.Version()
R.Version()
mydata <- read.csv("/Users/kojin/psets/cs181/cs181-practical3/artist_df.csv")
install.packages("FactoMineR")
library(FactoMineR)
R.Version()
DMFA(mydata)
View(data)
View(mydata)
mydata <- read.csv("/Users/kojin/psets/cs181/cs181-practical3/artist_df.csv")
library(FactoMineR)
R.Version()
DMFA(mydata)
library(FactoMineR)
R.Version()
mydata <- imputePCA(mydata)
require(missMDA)
mydata <- imputePCA(mydata)
DMFA(mydata)
install.packages("missMDA")
library(FactoMineR)
require(missMDA)
R.Version()
mydata <- imputePCA(mydata)
DMFA(mydata)
DMFA(mydata)
View(mydata)
View(mydata)
FAMD(mydata)
library(FactoMineR)
FAMD(mydata)
library(ade4)
scatter.dudi(dudi.mix(iris,scannf=FALSE))
library(ade4)
install.packages(ade4)
MFA(mydata)
load("~/Downloads/ml-100k/u.data")
mydata <- read.csv("/Users/kojin/psets/cs181/cs181-practical3/merged_df.csv")
install.packages("FactoMineR")
install.packages("missMDA")
library(FactoMineR)
MFA(mydata)
View(mydata)
View(mydata)
require(missMDA)
mydata <- imputePCA(mydata)
MFA(mydata)
names(mydata)
names(mydata)
names(mydata)
MFA(mydata,group=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,47,41,42,50,4)
q
MFA(mydata,group=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,47,41,42,50,4))
base_zeros = rep(1, 32)
base_ones = rep(0, 595-32)
base = c(base_zeros,base_ones)
v1_zeros = rep(1, 30)
v1_ones = rep(0, 599-30)
v1 = c(v1_zeros,v1_ones)
t.test(base, v1)
v2_zeros = rep(1, 18)
v2_ones = rep(0, 622-18)
v3_zeros = rep(1,51)
v3_ones = rep(0, 606-51)
v4_zeros = rep(1,38)
v4_ones = rep(0,578-38)
t.test(base, v1, alternative="greater")
t.test(base, v1, alternative="less")
v2 = c(v2_zeros,v2_ones)
v3 = c(v3_zeros,v3_ones)
v4 = c(v4_zeros,v4_ones)
t.test(base, v1, alternative="less")
t.test(base, v2, alternative="less")
t.test(base, v3, alternative="less")
t.test(base, v4, alternative="less")
load("~/Downloads/zenkoku.csv")
load("~/Downloads/KEN_ALL.CSV")
library(data.table)
version
packageVersion(dplyr)
packageVersion('dplyr')
install.packages(c("BH", "BSDA", "DBI", "DEoptimR", "FactoMineR", "Formula", "MASS", "Matrix", "NLP", "R6", "Rcpp", "SparseM", "assertthat", "boot", "car", "chron", "cluster", "codetools", "coin", "crayon", "curl", "devtools", "e1071", "foreign", "formatR", "git2r", "glmnet", "htmlwidgets", "httr", "igraph", "knitr", "lattice", "leaps", "lintr", "mgcv", "mice", "mltools", "mvtnorm", "nlme", "openssl", "proto", "quantreg", "readr", "robustbase", "rpart", "rstudioapi", "sandwich", "scales", "scatterplot3d", "stringdist", "tibble"))
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
setwd('/Users/kojin/psets/stat111/hw1')
df <- read.table("https://www.dartmouth.edu/~chance/teaching_aids/data/golf.txt", header=TRUE)
df
hist(df$StockRate)
summary(df$StockRate)
df <- read.csv("Births/births.csv")
hist(df$time,xlab="Time until Birth", freq=FALSE,main="Histogram of Time until Birth")
hist(df$time,xlab="Time until Birth",
freq=FALSE,main="Histogram of Time until Birth")
plot(cars)
plot(cars)
plot(cars)
plot(cars)
```{r}
df <- read.table("https://www.dartmouth.edu/~chance/teaching_aids/data/golf.txt", header=TRUE)
df
hist(df$StockRate)
summary(df$StockRate)
df <- read.table("https://www.dartmouth.edu/~chance/teaching_aids/data/golf.txt", header=TRUE)
hist(df$StockRate)
summary(df$StockRate)
df <- read.csv("Births/births.csv")
hist(df$time,xlab="Time until Birth",
freq=FALSE,main="Histogram of Time until Birth")
c(1:2:10)
df <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
colnames <- c('mpg','cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name')
colnames(df) <- colnames
df$weight
x = 2000
df[(df$weight > x - bin) & (df$weight < x + bin)]
bin = 30
df[(df$weight > x - bin) & (df$weight < x + bin)]
View(df)
View(df)
df[(df$weight > x - bin) && (df$weight < x + bin)]
(df$weight > x - bin)
(df$weight > x - bin) && (df$weight < x + bin)
(df$weight > x - bin) & (df$weight < x + bin)
df[(df$weight > x - bin) & (df$weight < x + bin)]
(df$weight > x - bin) & (df$weight < x + bin)
df[,(df$weight > x - bin) & (df$weight < x + bin)]
df[(df$weight > x - bin) & (df$weight < x + bin),]
ybar <- mean(df$mpg)
ybar
calc_ybar <- function(x,bin) {
bin_df <- df[(df$weight > x - bin) & (df$weight < x + bin),]
ybar <- mean(df$mpg)
}
calc_ybar(x,bin)
calc_ybar <- function(x,bin) {
bin_df <- df[(df$weight > x - bin) & (df$weight < x + bin),]
ybar <- mean(df$mpg)
ybar
}
calc_ybar(x,bin)
xs <- seq(min(df$weight),max(df$weight))
calc_ybar <- function(x,bin) {
bin_df <- df[(df$weight > x - bin) & (df$weight < x + bin),]
ybar <- mean(df$mpg)
ybar
}
sapply(xs,calc_bar,arg2=20)
sapply(xs,calc_ybar,arg2=20)
sapply(xs,calc_ybar,bin=20)
xs
calc_ybar <- function(x,bin) {
bin_df <- df[(df$weight > x - bin) & (df$weight < x + bin),]
ybar <- mean(bin_df$mpg)
ybar
}
ybars <- sapply(xs,calc_ybar,bin=20)
calc_ybar <- function(x,bin) {
bin_df <- df[(df$weight > x - bin) & (df$weight < x + bin),]
ybar <- mean(bin_df$mpg)
ybar
}
ybars <- sapply(xs,calc_ybar,bin=20)
ybars
plot(ybars)
calc_ybar <- function(x,bin) {
bin_df <- df[(df$weight > x - bin) & (df$weight < x + bin),]
ybar <- mean(bin_df$mpg)
ybar
}
bin = 30
xs <- seq(min(df$weight),max(df$weight),2*bin)
ybars <- sapply(xs,calc_ybar,bin=bin)
ybars
plot(ybars)
calc_ybar <- function(x,bin) {
# select elements within the bin
bin_df <- df[(df$weight > x - bin) & (df$weight < x + bin),]
# take the mean mpg value of each bin
ybar <- mean(bin_df$mpg)
ybar
}
plot_ybar <- function(bin) {
# select center points of bins
xs <- seq(min(df$weight),max(df$weight),2*bin)
# calculate ybar for each bin
ybars <- sapply(xs,calc_ybar,bin=bin)
plot(ybars)
}
plot_ybar(30)
calc_ybar <- function(x,bandwidth) {
# select elements within the bin
bin_df <- df[(df$weight > x - bandwidth / 2)
& (df$weight < x + bandwidth / 2),]
# take the mean mpg value of each bin
ybar <- mean(bin_df$mpg)
ybar
}
plot_ybar <- function(bandwidth) {
# select center points of bins
xs <- seq(min(df$weight),max(df$weight),bandwidth)
# calculate ybar for each bin
ybars <- sapply(xs,calc_ybar,bandwidth=bandwidth)
plot(ybars)
}
plot_ybar(30)
plot_ybar(60)
plot_ybar(160)
df <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
colnames <- c('mpg','cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name')
colnames(df) <- colnames
df <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
colnames <- c('mpg','cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name')
colnames(df) <- colnames
calc_ybar <- function(x,bandwidth) {
# select elements within the bin
bin_df <- df[(df$weight > x - bandwidth / 2)
& (df$weight < x + bandwidth / 2),]
# take the mean mpg value of each bin
ybar <- mean(bin_df$mpg)
ybar
}
plot_ybar <- function(bandwidth) {
# select center points of bins
xs <- seq(min(df$weight),max(df$weight),bandwidth)
# calculate ybar for each bin
ybars <- sapply(xs,calc_ybar,bandwidth=bandwidth)
plot(ybars)
}
plot_ybar(60)
plot_ybar(160)
plot_ybar <- function(bandwidth) {
# select center points of bins
xs <- seq(min(df$weight),max(df$weight),bandwidth)
# calculate ybar for each bin
ybars <- sapply(xs,calc_ybar,bandwidth=bandwidth)
plot(ybars, main = "Scatter Plot with Bandwidth = 60",
xlab = "Weight",
ylab = "MPG")
}
plot_ybar(60)
plot_ybar(160)
df <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
colnames <- c('mpg','cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name')
colnames(df) <- colnames
calc_ybar <- function(x,bandwidth) {
# select elements within the bin
bin_df <- df[(df$weight > x - bandwidth / 2)
& (df$weight < x + bandwidth / 2),]
# take the mean mpg value of each bin
ybar <- mean(bin_df$mpg)
ybar
}
plot_ybar <- function(bandwidth) {
# select center points of bins
xs <- seq(min(df$weight),max(df$weight),bandwidth)
# calculate ybar for each bin
ybars <- sapply(xs,calc_ybar,bandwidth=bandwidth)
plot(ybars, main = cat("Scatter Plot with Bandwidth = ", bandwidth),
xlab = "Weight",
ylab = "MPG")
}
plot_ybar(60)
plot_ybar(160)
df <- read.table(paste0("https://archive.ics.uci.edu/ml",
"/machine-learning-databases/auto-mpg/auto-mpg.data"))
colnames <- c('mpg','cylinders','displacement','horsepower',
'weight','acceleration','model year','origin','car name')
colnames(df) <- colnames
calc_ybar <- function(x,bandwidth) {
# select elements within the bin
bin_df <- df[(df$weight > x - bandwidth / 2)
& (df$weight < x + bandwidth / 2),]
# take the mean mpg value of each bin
ybar <- mean(bin_df$mpg)
ybar
}
plot_ybar <- function(bandwidth) {
# select center points of bins
xs <- seq(1680,5060,bandwidth)
# xs <- seq(min(df$weight),max(df$weight),bandwidth)
# calculate ybar for each bin
ybars <- sapply(xs,calc_ybar,bandwidth=bandwidth)
plot(xs, ybars, main = paste0("Scatter Plot with Bandwidth = ", bandwidth),
xlab = "Weight",
ylab = "MPG")
}
plot_ybar(60)
plot_ybar(160)
df <- read.table(paste0("https://archive.ics.uci.edu/ml",
"/machine-learning-databases/auto-mpg/auto-mpg.data"))
colnames <- c('mpg','cylinders','displacement','horsepower',
'weight','acceleration','model year','origin','car name')
colnames(df) <- colnames
calc_ybar <- function(x,bandwidth) {
# select elements within the bin
bin_df <- df[(df$weight > x - bandwidth / 2)
& (df$weight < x + bandwidth / 2),]
# take the mean mpg value of each bin
ybar <- mean(bin_df$mpg)
ybar
}
plot_ybar <- function(bandwidth) {
# select center points of bins
xs <- seq(1680,5060,bandwidth)
# xs <- seq(min(df$weight),max(df$weight),bandwidth)
# calculate ybar for each bin
ybars <- sapply(xs,calc_ybar,bandwidth=bandwidth)
plot(xs, ybars, main = paste0("Scatter Plot with Bandwidth = ", bandwidth),
xlab = "Weight",
ylab = "MPG")
}
plot_ybar(60)
plot_ybar(160)
df <- read.table(paste0("https://archive.ics.uci.edu/ml",
"/machine-learning-databases/auto-mpg/auto-mpg.data"))
colnames <- c('mpg','cylinders','displacement','horsepower',
'weight','acceleration','model year','origin','car name')
colnames(df) <- colnames
calc_ybar <- function(x,bandwidth) {
# select elements within the bin
bin_df <- df[(df$weight > x - bandwidth / 2)
& (df$weight < x + bandwidth / 2),]
# take the mean mpg value of each bin
ybar <- mean(bin_df$mpg)
ybar
}
plot_ybar <- function(bandwidth) {
# select center points of bins
xs <- seq(min(df$weight),max(df$weight),bandwidth)
# calculate ybar for each bin
ybars <- sapply(xs,calc_ybar,bandwidth=bandwidth)
plot(xs, ybars, main = paste0("Scatter Plot with Bandwidth = ", bandwidth),
xlab = "Weight",
ylab = "MPG")
}
plot_ybar(60)
plot_ybar(160)
